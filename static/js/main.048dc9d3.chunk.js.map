{"version":3,"sources":["Components/Filter/filter.module.css","Redux/contacts/contact.actions.js","services.js","Redux/contacts/contactsOperations.js","Redux/contacts/contact.redusers.js","Redux/store.js","Components/contact-selectors.js","Components/Form/Form.js","Components/Filter/filter.js","Components/Contacts/Contact.js","Components/Contacts/ContactList.js","App.js","index.js","Components/Form/Form.module.css"],"names":["module","exports","setFilter","createAction","BASE_URL","fetchContacts","a","fetch","then","res","json","postContact","contactData","method","body","JSON","stringify","headers","deleteContact","id","fetchData","createAsyncThunk","postData","deleteData","items","createReducer","fulfilled","state","action","payload","filter","_","isLoading","pending","rejected","total","contactsReduser","combineReducers","store","configureStore","reducer","contacts","devTools","process","getContacts","getFilter","getTotal","getVisibleContacts","createSelector","normalizedContact","toLowerCase","contact","name","includes","connect","dispatch","value","useState","setName","phoneNumber","setPhoneNumber","useDispatch","handleInputChange","e","type","currentTarget","alert","onFormSubmit","number","find","isNameInList","className","s","form","onSubmit","preventDefault","label","input","onChange","pattern","title","required","btn","onFilterInputChange","inputValue","visibleContacts","useEffect","onDeleteBtnClick","map","onClick","ContactList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.048dc9d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2DskI\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst setFilter = createAction('contacts/setFilter');\r\n\r\nexport {\r\n    setFilter\r\n};","const BASE_URL = 'http://localhost:8000/contacts'\r\n\r\n\r\nasync function fetchContacts() {\r\n    return await fetch(BASE_URL).then(res => res.json())\r\n};\r\n\r\nasync function postContact(contactData) {\r\n    return await fetch(BASE_URL, {\r\n        method: 'POST',\r\n        body: JSON.stringify(contactData),\r\n        headers: { 'Content-Type': 'application/json' }\r\n    })\r\n};\r\n\r\nasync function deleteContact(id) {\r\n    return await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'DELETE',\r\n    })\r\n};\r\n\r\nexport {\r\n    fetchContacts,\r\n    postContact,\r\n    deleteContact\r\n}","import { fetchContacts, postContact, deleteContact } from '../../services';\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst fetchData = createAsyncThunk('contacts/fetchContacts',\r\n    async () => {\r\n        return await fetchContacts();\r\n    }\r\n);\r\nconst postData = createAsyncThunk('contacts/postContact',\r\n    async (contactData) => {\r\n        return await postContact(contactData)\r\n    }\r\n);\r\nconst deleteData = createAsyncThunk('contacts/deleteContact',\r\n    async (id) => {\r\n        return await deleteContact(id)\r\n    }\r\n);\r\n\r\nexport { fetchData, postData, deleteData };","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport { setFilter } from './contact.actions';\r\nimport { fetchData, postData, deleteData } from './contactsOperations';\r\n\r\nconst items = createReducer([], {\r\n    [fetchData.fulfilled]: (state, action) => action.payload,\r\n});\r\nconst filter = createReducer('', {\r\n    [setFilter]: (_, action) => action.payload\r\n});\r\nconst isLoading = createReducer(false, {\r\n    [fetchData.pending]: () => true,\r\n    [fetchData.fulfilled]: () => false,\r\n    [fetchData.rejected]: () => false,\r\n    [postData.pending]: () => true,\r\n    [postData.fulfilled]: () => false,\r\n    [postData.rejected]: () => false,\r\n    [deleteData.pending]: () => true,\r\n    [deleteData.fulfilled]: () => false,\r\n    [deleteData.rejected]: () => false,\r\n});\r\nconst total = createReducer(0, {\r\n    [postData.fulfilled]: (state) => state + 1,\r\n    [deleteData.fulfilled]: (state) => state - 1,\r\n})\r\nconst contactsReduser = combineReducers({\r\n    items,\r\n    filter,\r\n    isLoading,\r\n    total\r\n});\r\nexport default contactsReduser;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReduser from \"./contacts/contact.redusers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReduser\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development'\r\n});\r\n\r\nexport { store };","import { createSelector } from \"reselect\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getTotal = (state) => state.contacts.total;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getFilter, getContacts],\r\n    (filter, contacts) => {\r\n        const normalizedContact = filter.toLowerCase();\r\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedContact));\r\n    }\r\n);\r\n\r\nexport {\r\n    getContacts,\r\n    getFilter,\r\n    getTotal,\r\n    getVisibleContacts,\r\n};","import PropTypes from 'prop-types';\r\nimport s from '../Form/Form.module.css';\r\nimport { useState } from \"react\";\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { getContacts } from '../contact-selectors';\r\nimport { setFilter } from '../../Redux/contacts/contact.actions';\r\nimport { postData } from '../../Redux/contacts/contactsOperations';\r\n\r\n\r\nfunction Form({ setFilter, contacts }) {\r\n    const [name, setName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const resetFormInput = () => {\r\n        setName('');\r\n        setPhoneNumber('');\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const type = e.currentTarget.name;\r\n        const value = e.currentTarget.value;\r\n        switch (type) {\r\n            case 'name':\r\n                setName(value)\r\n                break;\r\n            case 'phoneNumber':\r\n                setPhoneNumber(value)\r\n                break;\r\n            default: alert('invalid type')\r\n        };\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onFormSubmit(name, phoneNumber);\r\n        resetFormInput();\r\n    };\r\n\r\n    const isNameInList = (name) => contacts.find(contact =>\r\n      contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n    const onFormSubmit = (name, number) => {\r\n        if (isNameInList(name)) {\r\n            setFilter('');\r\n            return alert(`${name} is already in contacts`)\r\n        };\r\n        const contactData = {\r\n            name,\r\n            number\r\n        }\r\n        dispatch(postData(contactData))\r\n        setFilter('');\r\n    };\r\n        \r\n    return (\r\n        <form className={s.form} onSubmit={onSubmit}>\r\n            <label className={s.label}>Name\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={s.label}>Number\r\n                <input\r\n                    className={s.input}\r\n                    type=\"tel\"\r\n                    name=\"phoneNumber\"\r\n                    value={phoneNumber}\r\n                    onChange={handleInputChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    />\r\n            </label>\r\n            <button className={s.btn} type=\"submit\" >Add contact</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: getContacts(state)\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setFilter: (value) => dispatch(setFilter(value))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n\r\nForm.propTypes = {\r\n    setFilter: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.number.isRequired\r\n    }))\r\n};","import PropTypes from 'prop-types';\r\nimport s from '../Filter/filter.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { setFilter } from '../../Redux/contacts/contact.actions';\r\nimport { getFilter } from '../contact-selectors';\r\n\r\nfunction Filter ({onFilterInputChange, filter}) {\r\n    return (\r\n        <label>\r\n            <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={(e) => onFilterInputChange(e.currentTarget.value)}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filter: getFilter(state)\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFilterInputChange: (inputValue) => dispatch(setFilter(inputValue))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    onFilterInputChange: PropTypes.func.isRequired,\r\n    filter: PropTypes.string.isRequired\r\n}","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport {fetchData, deleteData} from '../../Redux/contacts/contactsOperations';\r\nimport { getTotal, getVisibleContacts } from '../contact-selectors';\r\n\r\nfunction Contact({ total, visibleContacts }) {\r\n    const dispatch = useDispatch();  \r\n\r\n    useEffect(() => {\r\n        dispatch(fetchData())\r\n    }, [dispatch, total]);\r\n\r\n    const onDeleteBtnClick = (e) => {\r\n        dispatch(deleteData(e.currentTarget.id))\r\n    };\r\n\r\n    return (\r\n        visibleContacts.map(({ name, number, id }) =>\r\n            <li key={id}>{name}: {number} <button type='button' id={id} onClick={onDeleteBtnClick}>Delete</button></li>)\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        visibleContacts: getVisibleContacts(state),\r\n        total: getTotal(state)\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Contact)\r\n\r\nContact.propTypes = {\r\n    visibleContacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.number.isRequired\r\n    })),\r\n};","import Contact from \"./Contact\";\r\n\r\nfunction ContactList () {\r\n    return (\r\n    <ul>\r\n       <Contact />\r\n    </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;\r\n","import './App.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Form from './Components/Form/Form';\nimport Filter from './Components/Filter/filter';\nimport ContactList from './Components/Contacts/ContactList';\n\nfunction App({ contacts }) {\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default connect()(App);\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired\n  }))\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\nimport App from './App';\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>\n    , document.getElementById('root'));\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__lS4wU\",\"btn\":\"Form_btn__18TGk\",\"label\":\"Form_label__3tPhE\",\"input\":\"Form_input__3ElJv\"};"],"sourceRoot":""}