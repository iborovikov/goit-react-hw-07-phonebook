{"version":3,"sources":["Components/Filter/filter.module.css","Redux/contacts/contact.actions.js","Redux/contacts/contact.redusers.js","Redux/store.js","Components/contact-selectors.js","services.js","Redux/contacts/contactsOperations.js","Components/Form/Form.js","Components/Filter/filter.js","Components/Contacts/Contact.js","Components/Contacts/ContactList.js","App.js","index.js","Components/Form/Form.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","postContactRequest","postContactSuccess","postContactsError","deleteDataRequest","deleteDataSuccess","deleteDataError","setFilter","items","createReducer","state","action","payload","filter","_","isLoading","total","contactsReduser","combineReducers","store","configureStore","reducer","contacts","devTools","process","getContacts","getFilter","getTotal","getVisibleContacts","createSelector","normalizedContact","toLowerCase","contact","name","includes","BASE_URL","fetchContacts","a","fetch","then","res","json","postContact","contactData","method","body","JSON","stringify","headers","deleteContact","id","connect","dispatch","value","useState","setName","phoneNumber","setPhoneNumber","useDispatch","handleInputChange","e","type","currentTarget","alert","onFormSubmit","number","find","isNameInList","postData","className","s","form","onSubmit","preventDefault","label","input","onChange","pattern","title","required","btn","onFilterInputChange","inputValue","visibleContacts","useEffect","onDeleteBtnClick","map","onClick","ContactList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eea7eb92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2DskI\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSucses');\r\nconst fetchContactsError = createAction('contacts/fetchContactsEror');\r\n\r\nconst postContactRequest = createAction('contacts/postContactRequest');\r\nconst postContactSuccess = createAction('contacts/postContactSuccess');\r\nconst postContactsError = createAction('contacts/postContactsError');\r\n\r\nconst deleteDataRequest = createAction('contacts/deleteDataRequest');\r\nconst deleteDataSuccess = createAction('contacts/deleteDataSuccess');\r\nconst deleteDataError = createAction('contacts/deleteDataError');\r\n\r\nconst setFilter = createAction('contacts/setFilter');\r\n\r\nexport {\r\n    setFilter,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    postContactRequest,\r\n    postContactSuccess,\r\n    postContactsError,\r\n    deleteDataRequest,\r\n    deleteDataSuccess,\r\n    deleteDataError\r\n};","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport {\r\n    setFilter,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    postContactSuccess,\r\n    postContactRequest,\r\n    postContactsError,\r\n    deleteDataRequest,\r\n    deleteDataSuccess,\r\n    deleteDataError\r\n} from './contact.actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (state, action) => action.payload,\r\n});\r\nconst filter = createReducer('', {\r\n    [setFilter]: (_, action) => action.payload\r\n});\r\nconst isLoading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [postContactRequest]: () => true,\r\n    [postContactSuccess]: () => false,\r\n    [postContactsError]: () => false,\r\n    [deleteDataRequest]: () => true,\r\n    [deleteDataSuccess]: () => false,\r\n    [deleteDataError]: () => false,\r\n});\r\nconst total = createReducer(0, {\r\n    [postContactSuccess]: (state) => state + 1,\r\n    [deleteDataSuccess]: (state) => state - 1,\r\n})\r\nconst contactsReduser = combineReducers({\r\n    items,\r\n    filter,\r\n    isLoading,\r\n    total\r\n});\r\nexport default contactsReduser;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReduser from \"./contacts/contact.redusers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReduser\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development'\r\n});\r\n\r\nexport { store };","import { createSelector } from \"reselect\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getTotal = (state) => state.contacts.total;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getFilter, getContacts],\r\n    (filter, contacts) => {\r\n        const normalizedContact = filter.toLowerCase();\r\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedContact));\r\n    }\r\n);\r\n\r\nexport {\r\n    getContacts,\r\n    getFilter,\r\n    getTotal,\r\n    getVisibleContacts,\r\n};","const BASE_URL = 'http://localhost:8000/contacts'\r\n\r\n\r\nasync function fetchContacts() {\r\n    return await fetch(BASE_URL).then(res => res.json())\r\n};\r\n\r\nasync function postContact(contactData) {\r\n    return await fetch(BASE_URL, {\r\n        method: 'POST',\r\n        body: JSON.stringify(contactData),\r\n        headers: { 'Content-Type': 'application/json' }\r\n    })\r\n};\r\n\r\nasync function deleteContact(id) {\r\n    return await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'DELETE',\r\n    })\r\n};\r\n\r\nexport {\r\n    fetchContacts,\r\n    postContact,\r\n    deleteContact\r\n}","import {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    postContactRequest,\r\n    postContactSuccess,\r\n    postContactsError,\r\n    deleteDataRequest,\r\n    deleteDataSuccess,\r\n    deleteDataError\r\n} from \"./contact.actions\";\r\nimport { fetchContacts, postContact, deleteContact } from '../../services';\r\n\r\nconst fetchData = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n    try {\r\n        const contacts = await fetchContacts();\r\n        dispatch(fetchContactsSuccess(contacts));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error));\r\n    }\r\n};\r\nconst postData = (contactData) => async dispatch => {\r\n    dispatch(postContactRequest())\r\n    try {\r\n        await postContact(contactData)\r\n        dispatch(postContactSuccess())\r\n    } catch (error) {\r\n        dispatch(postContactsError())\r\n    }\r\n};\r\nconst deleteData = (id) => async dispatch => {\r\n    dispatch(deleteDataRequest())\r\n    try {\r\n        await deleteContact(id)\r\n        dispatch(deleteDataSuccess())\r\n    } catch (error) {\r\n        dispatch(deleteDataError(error))\r\n    }\r\n};\r\n\r\nexport { fetchData, postData, deleteData };","import PropTypes from 'prop-types';\r\nimport s from '../Form/Form.module.css';\r\nimport { useState } from \"react\";\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { getContacts } from '../contact-selectors';\r\nimport { setFilter } from '../../Redux/contacts/contact.actions';\r\nimport { postData } from '../../Redux/contacts/contactsOperations';\r\n\r\n\r\nfunction Form({ setFilter, contacts }) {\r\n    const [name, setName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const resetFormInput = () => {\r\n        setName('');\r\n        setPhoneNumber('');\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const type = e.currentTarget.name;\r\n        const value = e.currentTarget.value;\r\n        switch (type) {\r\n            case 'name':\r\n                setName(value)\r\n                break;\r\n            case 'phoneNumber':\r\n                setPhoneNumber(value)\r\n                break;\r\n            default: alert('invalid type')\r\n        };\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onFormSubmit(name, phoneNumber);\r\n        resetFormInput();\r\n    };\r\n\r\n    const isNameInList = (name) => contacts.find(contact =>\r\n      contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n    const onFormSubmit = (name, number) => {\r\n        if (isNameInList(name)) {\r\n            setFilter('');\r\n            return alert(`${name} is already in contacts`)\r\n        };\r\n        const contactData = {\r\n            name,\r\n            number\r\n        }\r\n        dispatch(postData(contactData))\r\n        setFilter('');\r\n    };\r\n        \r\n    return (\r\n        <form className={s.form} onSubmit={onSubmit}>\r\n            <label className={s.label}>Name\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={s.label}>Number\r\n                <input\r\n                    className={s.input}\r\n                    type=\"tel\"\r\n                    name=\"phoneNumber\"\r\n                    value={phoneNumber}\r\n                    onChange={handleInputChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    />\r\n            </label>\r\n            <button className={s.btn} type=\"submit\" >Add contact</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: getContacts(state)\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setFilter: (value) => dispatch(setFilter(value))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n\r\nForm.propTypes = {\r\n    setFilter: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.number.isRequired\r\n    }))\r\n};","import PropTypes from 'prop-types';\r\nimport s from '../Filter/filter.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { setFilter } from '../../Redux/contacts/contact.actions';\r\nimport { getFilter } from '../contact-selectors';\r\n\r\nfunction Filter ({onFilterInputChange, filter}) {\r\n    return (\r\n        <label>\r\n            <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={(e) => onFilterInputChange(e.currentTarget.value)}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filter: getFilter(state)\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFilterInputChange: (inputValue) => dispatch(setFilter(inputValue))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    onFilterInputChange: PropTypes.func.isRequired,\r\n    filter: PropTypes.string.isRequired\r\n}","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport {fetchData, deleteData} from '../../Redux/contacts/contactsOperations';\r\nimport { getTotal, getVisibleContacts } from '../contact-selectors';\r\n\r\nfunction Contact({ total, visibleContacts }) {\r\n    const dispatch = useDispatch();  \r\n\r\n    useEffect(() => {\r\n        dispatch(fetchData())\r\n    }, [dispatch, total]);\r\n\r\n    const onDeleteBtnClick = (e) => {\r\n        dispatch(deleteData(e.currentTarget.id))\r\n    };\r\n\r\n    return (\r\n        visibleContacts.map(({ name, number, id }) =>\r\n            <li key={id}>{name}: {number} <button type='button' id={id} onClick={onDeleteBtnClick}>Delete</button></li>)\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        visibleContacts: getVisibleContacts(state),\r\n        total: getTotal(state)\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Contact)\r\n\r\nContact.propTypes = {\r\n    visibleContacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.number.isRequired\r\n    })),\r\n};","import Contact from \"./Contact\";\r\n\r\nfunction ContactList () {\r\n    return (\r\n    <ul>\r\n       <Contact />\r\n    </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;\r\n","import './App.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Form from './Components/Form/Form';\nimport Filter from './Components/Filter/filter';\nimport ContactList from './Components/Contacts/ContactList';\n\nfunction App({ contacts }) {\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default connect()(App);\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired\n  }))\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\nimport App from './App';\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>\n    , document.getElementById('root'));\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__lS4wU\",\"btn\":\"Form_btn__18TGk\",\"label\":\"Form_label__3tPhE\",\"input\":\"Form_input__3ElJv\"};"],"sourceRoot":""}